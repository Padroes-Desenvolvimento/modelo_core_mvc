//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Identity
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClaimsPrincipal", Namespace="http://schemas.datacontract.org/2004/07/System.Security.Claims")]
    public partial class ClaimsPrincipal : object
    {
        
        private string m_serializedClaimsIdentitiesField;
        
        private string m_versionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_serializedClaimsIdentities
        {
            get
            {
                return this.m_serializedClaimsIdentitiesField;
            }
            set
            {
                this.m_serializedClaimsIdentitiesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_version
        {
            get
            {
                return this.m_versionField;
            }
            set
            {
                this.m_versionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClaimCore", Namespace="http://schemas.datacontract.org/2004/07/Sefaz.Identity.Common")]
    public partial class ClaimCore : object
    {
        
        private string EmissorField;
        
        private string TipoField;
        
        private string ValorField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Emissor
        {
            get
            {
                return this.EmissorField;
            }
            set
            {
                this.EmissorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tipo
        {
            get
            {
                return this.TipoField;
            }
            set
            {
                this.TipoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Valor
        {
            get
            {
                return this.ValorField;
            }
            set
            {
                this.ValorField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Identity.ITokenWS")]
    public interface ITokenWS
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenWS/IsTokenValid", ReplyAction="http://tempuri.org/ITokenWS/IsTokenValidResponse")]
        System.Threading.Tasks.Task<bool> IsTokenValidAsync(string tokenXml, string realm, string tipoLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenWS/ValidateToken", ReplyAction="http://tempuri.org/ITokenWS/ValidateTokenResponse")]
        System.Threading.Tasks.Task<Identity.ClaimsPrincipal> ValidateTokenAsync(string tokenXml, string realm, string tipoLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenWS/ObterClaimsCore", ReplyAction="http://tempuri.org/ITokenWS/ObterClaimsCoreResponse")]
        System.Threading.Tasks.Task<Identity.ClaimCore[]> ObterClaimsCoreAsync(string tokenXml, string realm, string tipoLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenWS/ObterRealm", ReplyAction="http://tempuri.org/ITokenWS/ObterRealmResponse")]
        System.Threading.Tasks.Task<string> ObterRealmAsync(string tokenXml);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ITokenWSChannel : Identity.ITokenWS, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class TokenWSClient : System.ServiceModel.ClientBase<Identity.ITokenWS>, Identity.ITokenWS
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TokenWSClient() : 
                base(TokenWSClient.GetDefaultBinding(), TokenWSClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.TokenWS.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TokenWSClient(EndpointConfiguration endpointConfiguration) : 
                base(TokenWSClient.GetBindingForEndpoint(endpointConfiguration), TokenWSClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TokenWSClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TokenWSClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TokenWSClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TokenWSClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TokenWSClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> IsTokenValidAsync(string tokenXml, string realm, string tipoLogin)
        {
            return base.Channel.IsTokenValidAsync(tokenXml, realm, tipoLogin);
        }
        
        public System.Threading.Tasks.Task<Identity.ClaimsPrincipal> ValidateTokenAsync(string tokenXml, string realm, string tipoLogin)
        {
            return base.Channel.ValidateTokenAsync(tokenXml, realm, tipoLogin);
        }
        
        public System.Threading.Tasks.Task<Identity.ClaimCore[]> ObterClaimsCoreAsync(string tokenXml, string realm, string tipoLogin)
        {
            return base.Channel.ObterClaimsCoreAsync(tokenXml, realm, tipoLogin);
        }
        
        public System.Threading.Tasks.Task<string> ObterRealmAsync(string tokenXml)
        {
            return base.Channel.ObterRealmAsync(tokenXml);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.TokenWS))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.TokenWS))
            {
                return new System.ServiceModel.EndpointAddress("https://identityhml.lbintra.fazenda.sp.gov.br/v003/Sefaz.Identity.Util.WS.Host/To" +
                        "kenWS.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return TokenWSClient.GetBindingForEndpoint(EndpointConfiguration.TokenWS);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return TokenWSClient.GetEndpointAddress(EndpointConfiguration.TokenWS);
        }
        
        public enum EndpointConfiguration
        {
            
            TokenWS,
        }
    }
}
